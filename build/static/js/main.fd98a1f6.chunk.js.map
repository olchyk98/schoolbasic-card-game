{"version":3,"sources":["images.js","components/Card.js","components/Desk.js","components/Initmodal.js","components/Cards.js","App.js","serviceWorker.js","rules.js","reducers/global.js","reducers/index.js","index.js"],"names":["cardback","Card","cast","_this","props","global","currentTurn","isCasted","castCard","value","sender","runBot","clearBoard","react_default","a","createElement","className","concat","this","toLowerCase","onClick","src","alt","Component","connect","_ref","payload","type","DeskStack","cards","map","index","components_Card","key","Desk","gameDesk","session","Desk_DeskStack","passTurn","deskSize","_ref2","Initmodal","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","validateInput","toString","replace","length","setState","inputIsFail","inputIsSuccess","startGame","state","inGame","_this2","placeholder","onChange","target","Cards","playerDesk","botDesk","Part","components_Cards","App","initModal","react","isLoop","winMessage","initGame","components_Initmodal","App_Part","BOT_TURN","USER_TURN","components_Desk","Boolean","window","location","hostname","match","rules","minCard","maxCard","userDeskSize","reducer","arguments","undefined","assign","gen","Number","isInteger","list","ma","push","b","Math","floor","random","execute","c","e","slice","splice","findIndex","io","BOT_TARGET","USER_TARGET","g","f","Infinity","forEach","isFinite","reducers","combineReducers","store","createStore","devToolsExtension","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd98a1f6.chunk.js","sourcesContent":["// import cardback from './img/back.png';\n// import cardfront from './img/front.jpg';\n\n\nconst cardback = 'http://i.piccy.info/i9/7e64428850323739848f542cc3d71fff/1543089373/182550/1281257/back.png';\nconst cardfront = 'http://i.piccy.info/i9/68c09e0c335136830933b5e1e846e159/1543089402/70868/1281257/front.png';\n\nexport {\n    cardback,\n    cardfront\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { cardback, cardfront } from '../images';\n\nclass Card extends Component {\n    cast = () => {\n        if(this.props.global.currentTurn === \"BOT_TURN\" || this.props.isCasted) return;\n        this.props.castCard({\n            value: this.props.value,\n            sender: \"USER_TARGET\"\n        });\n        this.props.runBot();\n        this.props.clearBoard();\n    }\n\n    render() {\n        return(\n            <div\n                className={ `part-cards-card${ (!this.props.isCasted) ? \"\" : \" casted rotated\"  } ${ ((this.props.sender && this.props.sender.toLowerCase()) || \"\") }` }\n                onClick={ this.cast }>\n                <div className=\"part-cards-card-front\">\n                    <img\n                        src={ cardback }\n                        className=\"part-cards-card-front-image\"\n                        alt=\"card\"\n                    />          \n                </div>\n                <div className=\"part-cards-card-back\">\n                    <img\n                    src={ cardfront }\n                    className=\"part-cards-card-back-image\"\n                    alt=\"card\"\n                    />\n                    <span className=\"part-cards-card-back-mark\">{ this.props.value }</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ global }) => ({\n    global\n});\n\nconst mapActionsToProps = {\n    castCard: payload => ({ type: 'PUSH_CARD_TO_DESK', payload }),\n    runBot: () => ({ type: 'START_BOT_RUNNER', payload: '' }),\n    clearBoard: () => ({ type: 'ADAPTIVE_CLEAR_BOARD', payload: '' })\n}\n\nexport default connect(\n    mapStateToProps,\n    mapActionsToProps\n)(Card);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { cardback } from '../images';\n\nimport Card from './Card';\n\nclass DeskStack extends Component {\n    render() {\n        return(\n            <div className=\"desk-flow-stack\">\n                {\n                    this.props.cards.map(({ value, sender }, index) => (\n                        <Card\n                            key={ index }\n                            isCasted={ true }\n                            value={ value }\n                            sender={ sender }\n                        />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nclass Desk extends Component {\n    render() {\n        return(\n            <div className=\"desk\">\n                <div />\n                <div className=\"desk-flow\">\n                    {\n                        (this.props.global.gameDesk) ? (\n                            this.props.global.gameDesk.map((session, index) => (\n                                <DeskStack\n                                    key={ index }\n                                    cards={ session }\n                                />\n                            ))\n                        ) : null\n                    }\n                </div>\n                <div className=\"desk-cards\">\n                    {\n                        (this.props.global.currentTurn === 'USER_TURN') ? (\n                            <button\n                                className=\"desk-cards-pass\"\n                                onClick={ this.props.passTurn }>\n                                PASS\n                            </button>\n                        ) : null\n                    }\n                    {\n                        (this.props.global.deskSize) ? (\n                            <img src={ cardback } alt=\"desk cards\" className=\"desk-cards-image\" />\n                        ) : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ global }) => ({\n    global\n});\n\nconst mapActionsToProps = {\n    passTurn: () => ({ type: 'PASS_CURRENT_TURN', payload: '' })\n}\n\nexport default connect(\n    mapStateToProps,\n    mapActionsToProps\n)(Desk);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Initmodal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inputIsFail: false,\n            inputIsSuccess: false\n        }\n    }\n\n    validateInput = value => {\n        let a = (value.toString() && value.toString().replace(/ /g, \"\").length) ? true:false;\n        this.setState(() => ({\n            inputIsFail: !a,\n            inputIsSuccess: a\n        }));\n    }\n\n    startGame = () => {\n        if(this.state.inputIsSuccess && !this.props.global.inGame) this.props.startGame();\n    }\n\n    render() {\n      return(\n        <div className={ `initmodal${ (this.props.global.inGame) ? \"\" : \" visible\" }` }>\n          <div className=\"initmodal-mat\">\n            <h1 className=\"initmodal-mat-title\">Hi!</h1>\n            <p className=\"initmodal-mat-description\">Enter your nickname</p>\n            <input\n              placeholder=\"Nickname\"\n              onChange={ ({ target: { value } }) => this.validateInput(value) }\n              className={ `initmodal-mat-input${ (this.state.inputIsFail) ? \" red\" : \"\" }${ (this.state.inputIsSuccess) ? \" green\" : \"\" }` }\n            />\n            <button\n                className={ `initmodal-mat-submit${ (this.props.global.inGame) ? \" started\" : \"\" }` }\n                onClick={ this.startGame }>\n                    Start game\n                </button>\n          </div>\n        </div>\n      );\n    }\n}\n\nconst mapStateToProps = ({ global }) => ({\n    global\n});\n\nconst mapActionsToProps = {\n    startGame: () => ({ type: 'INITIALIZE_GAME', payload: true })\n}\n  \nexport default connect(\n    mapStateToProps,\n    mapActionsToProps\n)(Initmodal);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Card from './Card';\n\nclass Cards extends Component {\n    render() {\n        return(\n            <div className={ `part-cards ${ this.props.type.toLowerCase() } ${ this.props.target.toLowerCase() }` }>\n                {\n                    (this.props.global.inGame && this.props.global.playerDesk && this.props.global.botDesk) ? (\n                        this.props.global[(this.props.target === \"player\") ? \"playerDesk\" : \"botDesk\"].map((session, index) => (\n                            <Card\n                                key={ index }\n                                value={ (this.props.target === \"player\") ? session : \"\" }\n                            />\n                        ))\n                    ) : null\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ global }) => ({\n  global\n});\n\nexport default connect(\n  mapStateToProps\n)(Cards);\n","import React, {\n  Component,\n  Fragment\n} from 'react';\nimport { connect } from 'react-redux';\n\nimport Desk from './components/Desk';\nimport Initmodal from './components/Initmodal';\nimport Cards from './components/Cards';\n\nclass Part extends Component {\n  render() {\n    return(\n      <div className={ `part ${ this.props.type.toLowerCase() } ${ this.props.target }` }>\n        <Cards\n          type={ this.props.type }\n          target={ this.props.target }\n        />\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      initModal: false\n    }\n  }\n\n  componentDidMount() {\n    this.setState(() => ({ initModal: true }));\n  }\n\n  render() {\n    return(\n      <Fragment>\n        {\n          (!this.props.global.isLoop && !this.props.global.winMessage) ? (\n            <Fragment>\n              <Initmodal />\n              <Part\n                type=\"top\"\n                target=\"bot\"\n                currentTurn={ (this.props.global) ? {\"BOT_TURN\": \"bot\", \"USER_TURN\": \"user\"}[this.props.global.currentTurn] : \"\" }\n              />\n              <Desk />\n              <Part\n                type=\"bottom\"\n                target=\"player\"\n                currentTurn={ (this.props.global) ? {\"BOT_TURN\": \"bot\", \"USER_TURN\": \"user\"}[this.props.global.currentTurn] : \"\" }\n              />\n            </Fragment>    \n          ) : (\n            (this.props.global.isLoop) ? (\n              <span className=\"alertion\" onClick={ this.props.initGame }>TIE!</span>\n            ) : (\n              <span className=\"alertion\" onClick={ this.props.initGame }>{ this.props.global.winMessage }</span>\n            )\n          )\n        }\n        \n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ global }) => ({\n  global\n});\n\nconst mapActionsToProps = {\n  initGame: () => ({ type: 'INITIALIZE_GAME', payload: true })\n}\n\nexport default connect(\n  mapStateToProps,\n  mapActionsToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const rules = {\n    deskSize: 30, // cards in game desk\n    minCard: 1, // minimal card value\n    maxCard: 10, // maximal card value\n    userDeskSize: 4 // cards in user desk\n}\n\nexport default rules;","import rules from '../rules';\n\nfunction reducer(state = {}, { type, payload }) {\n    let a = Object.assign({}, state);\n\n    let gen = () => {\n        if(\n            !Number.isInteger(a.deskSize) || a.deskSize > 0\n        ) {\n            let list = [];\n            for(let ma = rules.minCard; ma <= rules.maxCard; ma++) { // arr range\n                list.push(ma);\n            }\n\n            let b = [];\n            for(let ma = 0; ma < ((!Number.isInteger(a.deskSize) || a.deskSize > rules.userDeskSize) ? rules.userDeskSize : a.gameDesk); ma++) {\n                b.push(list[Math.floor(Math.random() * list.length)]);\n            }\n\n            if(a.deskSize) a.deskSize -= rules.userDeskSize;\n            return b;\n        } else if(\n            a.deskSize <= 0 &&\n            (\n                (a.botDesk && !a.botDesk.length) ||\n                (a.playerDesk && !a.playerDesk.length)\n            )\n        ) {\n            if(!a.botDesk.length) {\n                a.winMessage = \"Bot won!\";\n            } else if(!a.playerDesk.length) {\n                a.winMessage = \"Player won!\";\n            }\n            return [];\n        } else {\n            return [];\n        }\n    }\n\n    function execute(type, payload) {\n        switch(type) {\n            case 'INITIALIZE_GAME': // WARNING: Store enter point\n                if(payload) {\n                    a = {\n                        deskSize: rules.deskSize,\n                        botDesk: gen(), // [*]\n                        playerDesk: gen(), // [*]\n                        inGame: true,\n                        gameDesk: [],\n                        currentTurn: \"USER_TURN\",\n                        isLoop: null,\n                        winMessage: \"\"\n                    }\n                }\n            break;\n            case 'PUSH_CARD_TO_DESK':\n                {\n                    let b = a.gameDesk,\n                        c = {\n                            value: payload.value,\n                            sender: payload.sender\n                        },\n                        d = {\n                            \"BOT_TARGET\" : \"USER_TURN\",\n                            \"USER_TARGET\" : \"BOT_TURN\"\n                        },\n                        e = false;\n\n                    if(!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) { // create new\n                        a.gameDesk.push([c]);\n                        e = true;\n                    } else if(a.gameDesk[b.length - 1].slice(-1)[0].value <= payload.value) { // beat\n                        a.gameDesk[b.length - 1].push(c);\n                        e = true;\n                    }\n    \n                    if(e) {\n                        a.playerDesk.splice(a.playerDesk.findIndex(io => io === payload.value), 1);\n                        if(a.playerDesk.length === 0) {\n                            a.playerDesk = gen();\n                        }\n                        a.currentTurn = d[payload.sender];\n                    }\n                }\n            break;\n            case 'START_BOT_RUNNER':\n                if(a.currentTurn === 'BOT_TURN') { // TODO: Test\n                    let b = a.botDesk, // bot desc\n                        d = a.gameDesk,\n                        e = d.slice(-1)[0], // last casted cart\n                        g = f => {\n                            a.botDesk.splice(a.botDesk.findIndex(io => io === f), 1);\n                            if(a.botDesk.length === 0) {\n                                a.botDesk = gen();\n                            }\n                        }\n            \n                    if(!e || e.length !== 1) {\n                        a.gameDesk.push([{\n                            value: b[0],\n                            sender: \"BOT_TARGET\"\n                        }]);\n                        g(b[0]);\n                        a.currentTurn = \"USER_TURN\";\n                    } else {\n                        let f = Infinity; // best answer\n                        a.botDesk.forEach(io => {\n                            if(io < f && io >= e.slice(-1)[0].value) {\n                                f = io;\n                            }\n                        });\n            \n                        if(isFinite(f)) { // found\n                            a.gameDesk[a.gameDesk.length - 1].push({\n                                value: f,\n                                sender: \"BOT_TARGET\"\n                            });\n                            g(f);\n                            execute('START_BOT_RUNNER', '');\n                        } else { // miss\n                            a.isLoop = (a.isLoop === null) ? false : true;\n                            a.currentTurn = \"USER_TURN\";\n                        }\n                    }\n                }\n            break;\n            case 'PASS_CURRENT_TURN':\n                if(a.currentTurn === 'USER_TURN') {\n                    if(a.deskSize.length) {\n                        a.isLoop = (a.isLoop === null) ? false : true;\n                        a.currentTurn = \"BOT_TURN\";\n                        execute('START_BOT_RUNNER', '');\n                    } else {\n                        a.winMessage = \"Bot won!\";\n                    }\n                }\n            break;\n            case 'ADAPTIVE_CLEAR_BOARD':\n                if(a.gameDesk && a.gameDesk.length === 4) {\n                    a.gameDesk.splice(0, 2);\n                }\n            break;\n            default:break;\n        }\n    }\n    execute(type, payload);\n\n    return a;\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\nimport global from './global';\n\nconst reducers = combineReducers({\n    global\n});\n\nexport default reducers;","// React and some stuff\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Redux\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers';\n\nconst store = createStore(\n    reducers,\n    {},\n    window.devToolsExtension && window.devToolsExtension()\n);\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}