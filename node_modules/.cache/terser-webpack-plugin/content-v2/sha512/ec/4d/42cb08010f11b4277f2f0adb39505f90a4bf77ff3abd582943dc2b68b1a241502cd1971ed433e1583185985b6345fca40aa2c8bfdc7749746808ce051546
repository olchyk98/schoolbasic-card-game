{"map":"{\"version\":3,\"sources\":[\"/Users/olesodynets/Documents/Coding/htdocs/card-play/node_modules/url-loader/dist/cjs.js??ref--6-oneOf-0!/Users/olesodynets/Documents/Coding/htdocs/card-play/src/img/back.png\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/node_modules/url-loader/dist/cjs.js??ref--6-oneOf-0!/Users/olesodynets/Documents/Coding/htdocs/card-play/src/img/front.jpg\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/components/Card.js\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/components/Desk.js\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/components/Initmodal.js\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/components/Cards.js\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/App.js\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/serviceWorker.js\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/rules.js\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/reducers/global.js\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/reducers/index.js\",\"/Users/olesodynets/Documents/Coding/htdocs/card-play/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"Card\",\"cast\",\"_this\",\"props\",\"global\",\"currentTurn\",\"castCard\",\"value\",\"sender\",\"runBot\",\"clearBoard\",\"react_default\",\"a\",\"createElement\",\"className\",\"concat\",\"this\",\"isCasted\",\"onClick\",\"src\",\"cardback\",\"alt\",\"cardfront\",\"Component\",\"connect\",\"_ref\",\"payload\",\"type\",\"DeskStack\",\"cards\",\"map\",\"index\",\"components_Card\",\"key\",\"Desk\",\"gameDesk\",\"session\",\"Desk_DeskStack\",\"passTurn\",\"deskSize\",\"_ref2\",\"Initmodal\",\"Object\",\"classCallCheck\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"validateInput\",\"toString\",\"replace\",\"length\",\"setState\",\"inputIsFail\",\"inputIsSuccess\",\"startGame\",\"state\",\"_this2\",\"inGame\",\"placeholder\",\"onChange\",\"target\",\"Cards\",\"toLowerCase\",\"playerDesk\",\"botDesk\",\"Part\",\"components_Cards\",\"App\",\"initModal\",\"react\",\"isLoop\",\"winMessage\",\"components_Initmodal\",\"App_Part\",\"BOT_TURN\",\"USER_TURN\",\"components_Desk\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"rules\",\"minCard\",\"maxCard\",\"userDeskSize\",\"reducer\",\"arguments\",\"undefined\",\"assign\",\"gen\",\"Number\",\"isInteger\",\"list\",\"ma\",\"push\",\"b\",\"Math\",\"floor\",\"random\",\"execute\",\"c\",\"e\",\"slice\",\"BOT_TARGET\",\"USER_TARGET\",\"splice\",\"findIndex\",\"io\",\"g\",\"f\",\"Infinity\",\"forEach\",\"isFinite\",\"reducers\",\"combineReducers\",\"store\",\"createStore\",\"devToolsExtension\",\"ReactDOM\",\"render\",\"es\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4PCKlCC,6MACFC,KAAO,WACkC,aAAlCC,EAAKC,MAAMC,OAAOC,cACrBH,EAAKC,MAAMG,SAAS,CAChBC,MAAOL,EAAKC,MAAMI,MAClBC,OAAQ,gBAEZN,EAAKC,MAAMM,SACXP,EAAKC,MAAMO,uFAIX,OACIC,EAAAC,EAAAC,cAAA,MAAA,CACIC,UAAS,kBAAAC,OAAwBC,KAAKb,MAAMc,SAAiB,kBAAL,GAA/C,KAAAF,OAA4EC,KAAKb,MAAMK,QAChGU,QAAUF,KAAKf,MACfU,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,MAAA,CACIM,IAAMC,EAAAA,EACNN,UAAU,8BACVO,IAAI,UAGZV,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,MAAA,CACAM,IAAMG,EAAAA,EACNR,UAAU,6BACVO,IAAI,SAEJV,EAAAC,EAAAC,cAAA,OAAA,CAAMC,UAAU,6BAA8BE,KAAKb,MAAMI,gBA7B1DgB,EAAAA,WA8CJC,EAAAA,OAAAA,EAAAA,EAAAA,CAVS,SAAAC,GAAA,MAAiB,CACrCrB,OADoBqB,EAAGrB,SAID,CACtBE,SAAU,SAAAoB,GAAO,MAAK,CAAEC,KAAM,oBAAqBD,QAAAA,IACnDjB,OAAQ,WAAA,MAAO,CAAEkB,KAAM,mBAAoBD,QAAS,KACpDhB,WAAY,WAAA,MAAO,CAAEiB,KAAM,uBAAwBD,QAAS,MAGjDF,CAGbxB,GC/CI4B,mLAEE,OACIjB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,mBAEPE,KAAKb,MAAM0B,MAAMC,IAAI,SAAAL,EAAoBM,GAApB,IAAGxB,EAAHkB,EAAGlB,MAAOC,EAAViB,EAAUjB,OAAV,OACjBG,EAAAC,EAAAC,cAACmB,EAAD,CACIC,IAAMF,EACNd,UAAW,EACXV,MAAQA,EACRC,OAASA,cAVbe,EAAAA,WAmBlBW,mLAEE,OACIvB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,MAAA,MACAF,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,aAENE,KAAKb,MAAMC,OAAO+B,SACfnB,KAAKb,MAAMC,OAAO+B,SAASL,IAAI,SAACM,EAASL,GAAV,OAC3BpB,EAAAC,EAAAC,cAACwB,EAAD,CACIJ,IAAMF,EACNF,MAAQO,MAGhB,MAGZzB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cAE4B,cAAlCE,KAAKb,MAAMC,OAAOC,YACfM,EAAAC,EAAAC,cAAA,SAAA,CACIC,UAAU,kBACVI,QAAUF,KAAKb,MAAMmC,UAFzB,QAKA,KAGHtB,KAAKb,MAAMC,OAAOmC,SACf5B,EAAAC,EAAAC,cAAA,MAAA,CAAKM,IAAMC,EAAAA,EAAWC,IAAI,aAAaP,UAAU,qBACjD,cA9BTS,EAAAA,WA8CJC,EAAAA,OAAAA,EAAAA,EAAAA,CARS,SAAAgB,GAAA,MAAiB,CACrCpC,OADoBoC,EAAGpC,SAID,CACtBkC,SAAU,WAAA,MAAO,CAAEX,KAAM,oBAAqBD,QAAS,MAG5CF,CAGbU,GCxEIO,cACF,SAAAA,EAAYtC,GAAO,IAAAD,EAAA,OAAAwC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAyB,IACfvC,EAAAwC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA9B,KAAMb,KAQV4C,cAAgB,SAAAxC,GACZ,IAAIK,KAAKL,EAAMyC,aAAczC,EAAMyC,WAAWC,QAAQ,KAAM,IAAIC,QAChEhD,EAAKiD,SAAS,WAAA,MAAO,CACjBC,aAAcxC,EACdyC,eAAgBzC,MAbLV,EAiBnBoD,UAAY,WACLpD,EAAKqD,MAAMF,gBAAgBnD,EAAKC,MAAMmD,aAfzCpD,EAAKqD,MAAQ,CACTH,aAAa,EACbC,gBAAgB,GALLnD,wEAqBV,IAAAsD,EAAAxC,KACP,OACEL,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAS,YAAAC,OAAiBC,KAAKb,MAAMC,OAAOqD,OAAU,GAAK,aAC9D9C,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAU,uBAAd,OACAH,EAAAC,EAAAC,cAAA,IAAA,CAAGC,UAAU,6BAAb,uBACAH,EAAAC,EAAAC,cAAA,QAAA,CACE6C,YAAY,WACZC,SAAW,SAAAlC,GAAA,IAAalB,EAAbkB,EAAGmC,OAAUrD,MAAb,OAA2BiD,EAAKT,cAAcxC,IACzDO,UAAS,sBAAAC,OAA2BC,KAAKuC,MAAMH,YAAe,OAAS,IAA9DrC,OAAsEC,KAAKuC,MAAMF,eAAkB,SAAW,MAEzH1C,EAAAC,EAAAC,cAAA,SAAA,CACIC,UAAS,uBAAAC,OAA4BC,KAAKb,MAAMC,OAAOqD,OAAU,WAAa,IAC9EvC,QAAUF,KAAKsC,WAFnB,uBAjCY/B,EAAAA,WAoDTC,EAAAA,OAAAA,EAAAA,EAAAA,CARS,SAAAgB,GAAA,MAAiB,CACrCpC,OADoBoC,EAAGpC,SAID,CACtBkD,UAAW,WAAA,MAAO,CAAE3B,KAAM,kBAAmBD,SAAS,KAG3CF,CAGbiB,GCrDIoB,mLACO,IAAA3D,EAAAc,KACL,OACIL,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAS,cAAAC,OAAkBC,KAAKb,MAAMwB,KAAKmC,cAAlC,KAAA/C,OAAqDC,KAAKb,MAAMyD,OAAOE,gBAE5E9C,KAAKb,MAAMC,OAAOqD,QAAUzC,KAAKb,MAAMC,OAAO2D,YAAc/C,KAAKb,MAAMC,OAAO4D,QAC3EhD,KAAKb,MAAMC,OAA8B,WAAtBY,KAAKb,MAAMyD,OAAuB,aAAe,WAAW9B,IAAI,SAACM,EAASL,GAAV,OAC/EpB,EAAAC,EAAAC,cAACmB,EAAD,CACIC,IAAMF,EACNxB,MAA+B,WAAtBL,EAAKC,MAAMyD,OAAuBxB,EAAU,OAG7D,aAZJb,EAAAA,WAuBLC,EAAAA,OAAAA,EAAAA,EAAAA,CAJS,SAAAC,GAAA,MAAiB,CACvCrB,OADsBqB,EAAGrB,SAIZoB,CAEbqC,GCpBII,mLAEF,OACEtD,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAS,QAAAC,OAAYC,KAAKb,MAAMwB,KAAKmC,cAA5B,KAAA/C,OAA+CC,KAAKb,MAAME,cACtEM,EAAAC,EAAAC,cAACqD,EAAD,CACEvC,KAAOX,KAAKb,MAAMwB,KAClBiC,OAAS5C,KAAKb,MAAMyD,iBANXrC,EAAAA,WAab4C,cACJ,SAAAA,EAAYhE,GAAO,IAAAD,EAAA,OAAAwC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAmD,IACjBjE,EAAAwC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAyB,GAAArB,KAAA9B,KAAMb,KAEDoD,MAAQ,CACXa,WAAW,GAJIlE,mFASjBc,KAAKmC,SAAS,WAAA,MAAO,CAAEiB,WAAW,sCAIlC,OACEzD,EAAAC,EAAAC,cAACwD,EAAA,SAAD,KAEMrD,KAAKb,MAAMC,OAAOkE,QAAWtD,KAAKb,MAAMC,OAAOmE,WAgB9CvD,KAAKb,MAAMC,OAAOkE,OACjB3D,EAAAC,EAAAC,cAAA,OAAA,CAAMC,UAAU,YAAhB,QAEAH,EAAAC,EAAAC,cAAA,OAAA,CAAMC,UAAU,YAAaE,KAAKb,MAAMC,OAAOmE,YAlBjD5D,EAAAC,EAAAC,cAACwD,EAAA,SAAD,KACE1D,EAAAC,EAAAC,cAAC2D,EAAD,MACA7D,EAAAC,EAAAC,cAAC4D,EAAD,CACE9C,KAAK,MACLiC,OAAO,MACPvD,YAAeW,KAAKb,MAAMC,OAAU,CAACsE,SAAY,MAAOC,UAAa,QAAQ3D,KAAKb,MAAMC,OAAOC,aAAe,KAEhHM,EAAAC,EAAAC,cAAC+D,EAAD,MACAjE,EAAAC,EAAAC,cAAC4D,EAAD,CACE9C,KAAK,SACLiC,OAAO,SACPvD,YAAeW,KAAKb,MAAMC,OAAU,CAACsE,SAAY,MAAOC,UAAa,QAAQ3D,KAAKb,MAAMC,OAAOC,aAAe,cA7B5GkB,EAAAA,WAkDHC,EAAAA,OAAAA,EAAAA,EAAAA,CAJS,SAAAC,GAAA,MAAiB,CACvCrB,OADsBqB,EAAGrB,SAIZoB,CAEb2C,GC/DkBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECXSC,EAPD,CACV3C,SAAU,GACV4C,QAAS,EACTC,QAAS,GACTC,aAAc,GC8IHC,IAAAA,EAhJf,WAAgD,IAA/B/B,EAA+BgC,UAAArC,OAAA,QAAAsC,IAAAD,UAAA,GAAAA,UAAA,GAAvB,GAAuB9D,EAAA8D,UAAArC,OAAA,EAAAqC,UAAA,QAAAC,EAAjB7D,EAAiBF,EAAjBE,KAAMD,EAAWD,EAAXC,QAC7Bd,EAAI8B,OAAO+C,OAAO,GAAIlC,GAEtBmC,EAAM,WACN,IACKC,OAAOC,UAAUhF,EAAE2B,WAAa3B,EAAE2B,SAAW,EAChD,CAEE,IADA,IAAIsD,EAAO,GACHC,EAAKZ,EAAMC,QAASW,GAAMZ,EAAME,QAASU,IAC7CD,EAAKE,KAAKD,GAId,IADA,IAAIE,EAAI,GACAF,EAAK,EAAGA,IAAQH,OAAOC,UAAUhF,EAAE2B,WAAa3B,EAAE2B,SAAW2C,EAAMG,aAAgBH,EAAMG,aAAezE,EAAEuB,UAAW2D,IACzHE,EAAED,KAAKF,EAAKI,KAAKC,MAAMD,KAAKE,SAAWN,EAAK3C,UAIhD,OADGtC,EAAE2B,WAAU3B,EAAE2B,UAAY2C,EAAMG,cAC5BW,EACJ,OACHpF,EAAE2B,UAAY,IAET3B,EAAEoD,UAAYpD,EAAEoD,QAAQd,QACxBtC,EAAEmD,aAAenD,EAAEmD,WAAWb,SAG/BtC,EAAEoD,QAAQd,OAEHtC,EAAEmD,WAAWb,SACpBtC,EAAE2D,WAAa,eAFf3D,EAAE2D,WAAa,WAIZ,IAEA,IA4Gf,OAxGA,SAAS6B,EAAQzE,EAAMD,GACnB,OAAOC,GACH,IAAK,kBACED,IACCd,EAAI,CACA2B,SAAU2C,EAAM3C,SAChByB,QAAS0B,IACT3B,WAAY2B,IACZjC,QAAQ,EACRtB,SAAU,GACV9B,YAAa,YACbiE,OAAQ,KACRC,WAAY,KAGxB,MACA,IAAK,oBAEG,IAAIyB,EAAIpF,EAAEuB,SACNkE,EAAI,CACA9F,MAAOmB,EAAQnB,MACfC,OAAQkB,EAAQlB,QAMpB8F,GAAI,EAEJN,EAAEO,OAAO,GAAG,IAAgC,IAA1BP,EAAEO,OAAO,GAAG,GAAGrD,OAI3BtC,EAAEuB,SAAS6D,EAAE9C,OAAS,GAAGqD,OAAO,GAAG,GAAGhG,OAASmB,EAAQnB,QAC7DK,EAAEuB,SAAS6D,EAAE9C,OAAS,GAAG6C,KAAKM,GAC9BC,GAAI,IALJ1F,EAAEuB,SAAS4D,KAAK,CAACM,IACjBC,GAAI,EACJ1F,EAAEP,YATE,CACAmG,WAAe,YACfC,YAAgB,YAOF/E,EAAQlB,SAM3B8F,IACC1F,EAAEmD,WAAW2C,OAAO9F,EAAEmD,WAAW4C,UAAU,SAAAC,GAAE,OAAIA,IAAOlF,EAAQnB,QAAQ,GAC7C,IAAxBK,EAAEmD,WAAWb,SACZtC,EAAEmD,WAAa2B,MAI/B,MACA,IAAK,mBACD,GAAqB,aAAlB9E,EAAEP,YAA4B,CAC7B,IAAI2F,EAAIpF,EAAEoD,QAENsC,EADI1F,EAAEuB,SACAoE,OAAO,GAAG,GAChBM,EAAI,SAAAC,GACAlG,EAAEoD,QAAQ0C,OAAO9F,EAAEoD,QAAQ2C,UAAU,SAAAC,GAAE,OAAIA,IAAOE,IAAI,GAC9B,IAArBlG,EAAEoD,QAAQd,SACTtC,EAAEoD,QAAU0B,MAIxB,GAAIY,GAAkB,IAAbA,EAAEpD,OAOJ,CACH,IAAI4D,EAAIC,EAAAA,EACRnG,EAAEoD,QAAQgD,QAAQ,SAAAJ,GACXA,EAAKE,GAAKF,GAAMN,EAAEC,OAAO,GAAG,GAAGhG,QAC9BuG,EAAIF,KAITK,SAASH,IACRlG,EAAEuB,SAASvB,EAAEuB,SAASe,OAAS,GAAG6C,KAAK,CACnCxF,MAAOuG,EACPtG,OAAQ,eAEZqG,EAAEC,GACFV,EAAQ,mBAAoB,MAE5BxF,EAAE0D,OAAuB,OAAb1D,EAAE0D,OACd1D,EAAEP,YAAc,kBAvBpBO,EAAEuB,SAAS4D,KAAK,CAAC,CACbxF,MAAOyF,EAAE,GACTxF,OAAQ,gBAEZqG,EAAEb,EAAE,IACJpF,EAAEP,YAAc,YAsB5B,MACA,IAAK,oBACoB,cAAlBO,EAAEP,cACDO,EAAE0D,OAAuB,OAAb1D,EAAE0D,OACd1D,EAAEP,YAAc,WAChB+F,EAAQ,mBAAoB,KAEpC,MACA,IAAK,uBACExF,EAAEuB,UAAkC,IAAtBvB,EAAEuB,SAASe,QACxBtC,EAAEuB,SAASuE,OAAO,EAAG,IAMrCN,CAAQzE,EAAMD,GAEPd,GCxIIsG,EAJEC,OAAAA,EAAAA,EAAAA,CAAgB,CAC7B/G,OAAAA,ICQEgH,EAAQC,OAAAA,EAAAA,EAAAA,CACVH,EACA,GACApC,OAAOwC,mBAAqBxC,OAAOwC,qBAGvCC,EAAAA,EAASC,OACL7G,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAAUL,MAAQA,GACdzG,EAAAC,EAAAC,cAAC6G,EAAD,OACSC,SAASC,eAAe,SJ4GnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/back.8698b6a0.png\\\";\",\"module.exports = __webpack_public_path__ + \\\"static/media/front.f6265407.jpg\\\";\",\"import React, { Component } from 'react';\\nimport { connect } from 'react-redux';\\n\\nimport { cardback, cardfront } from '../images';\\n\\nclass Card extends Component {\\n    cast = () => {\\n        if(this.props.global.currentTurn === \\\"BOT_TURN\\\") return;\\n        this.props.castCard({\\n            value: this.props.value,\\n            sender: \\\"USER_TARGET\\\"\\n        });\\n        this.props.runBot();\\n        this.props.clearBoard();\\n    }\\n\\n    render() {\\n        return(\\n            <div\\n                className={ `part-cards-card${ (!this.props.isCasted) ? \\\"\\\" : \\\" casted rotated\\\"  } ${ this.props.sender }` }\\n                onClick={ this.cast }>\\n                <div className=\\\"part-cards-card-front\\\">\\n                    <img\\n                        src={ cardback }\\n                        className=\\\"part-cards-card-front-image\\\"\\n                        alt=\\\"card\\\"\\n                    />          \\n                </div>\\n                <div className=\\\"part-cards-card-back\\\">\\n                    <img\\n                    src={ cardfront }\\n                    className=\\\"part-cards-card-back-image\\\"\\n                    alt=\\\"card\\\"\\n                    />\\n                    <span className=\\\"part-cards-card-back-mark\\\">{ this.props.value }</span>\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n\\nconst mapStateToProps = ({ global }) => ({\\n    global\\n});\\n\\nconst mapActionsToProps = {\\n    castCard: payload => ({ type: 'PUSH_CARD_TO_DESK', payload }),\\n    runBot: () => ({ type: 'START_BOT_RUNNER', payload: '' }),\\n    clearBoard: () => ({ type: 'ADAPTIVE_CLEAR_BOARD', payload: '' })\\n}\\n\\nexport default connect(\\n    mapStateToProps,\\n    mapActionsToProps\\n)(Card);\",\"import React, { Component } from 'react';\\nimport { connect } from 'react-redux';\\n\\nimport { cardback } from '../images';\\n\\nimport Card from './Card';\\n\\nclass DeskStack extends Component {\\n    render() {\\n        return(\\n            <div className=\\\"desk-flow-stack\\\">\\n                {\\n                    this.props.cards.map(({ value, sender }, index) => (\\n                        <Card\\n                            key={ index }\\n                            isCasted={ true }\\n                            value={ value }\\n                            sender={ sender }\\n                        />\\n                    ))\\n                }\\n            </div>\\n        );\\n    }\\n}\\n\\nclass Desk extends Component {\\n    render() {\\n        return(\\n            <div className=\\\"desk\\\">\\n                <div />\\n                <div className=\\\"desk-flow\\\">\\n                    {\\n                        (this.props.global.gameDesk) ? (\\n                            this.props.global.gameDesk.map((session, index) => (\\n                                <DeskStack\\n                                    key={ index }\\n                                    cards={ session }\\n                                />\\n                            ))\\n                        ) : null\\n                    }\\n                </div>\\n                <div className=\\\"desk-cards\\\">\\n                    {\\n                        (this.props.global.currentTurn === 'USER_TURN') ? (\\n                            <button\\n                                className=\\\"desk-cards-pass\\\"\\n                                onClick={ this.props.passTurn }>\\n                                PASS\\n                            </button>\\n                        ) : null\\n                    }\\n                    {\\n                        (this.props.global.deskSize) ? (\\n                            <img src={ cardback } alt=\\\"desk cards\\\" className=\\\"desk-cards-image\\\" />\\n                        ) : null\\n                    }\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n\\nconst mapStateToProps = ({ global }) => ({\\n    global\\n});\\n\\nconst mapActionsToProps = {\\n    passTurn: () => ({ type: 'PASS_CURRENT_TURN', payload: '' })\\n}\\n\\nexport default connect(\\n    mapStateToProps,\\n    mapActionsToProps\\n)(Desk);\\n\\n\",\"import React, { Component } from 'react';\\nimport { connect } from 'react-redux';\\n\\nclass Initmodal extends Component {\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            inputIsFail: false,\\n            inputIsSuccess: false\\n        }\\n    }\\n\\n    validateInput = value => {\\n        let a = (value.toString() && value.toString().replace(/ /g, \\\"\\\").length) ? true:false;\\n        this.setState(() => ({\\n            inputIsFail: !a,\\n            inputIsSuccess: a\\n        }));\\n    }\\n\\n    startGame = () => {\\n        if(this.state.inputIsSuccess) this.props.startGame();\\n    }\\n\\n    render() {\\n      return(\\n        <div className={ `initmodal${ (this.props.global.inGame) ? \\\"\\\" : \\\" visible\\\" }` }>\\n          <div className=\\\"initmodal-mat\\\">\\n            <h1 className=\\\"initmodal-mat-title\\\">Hi!</h1>\\n            <p className=\\\"initmodal-mat-description\\\">Enter your nickname</p>\\n            <input\\n              placeholder=\\\"Nickname\\\"\\n              onChange={ ({ target: { value } }) => this.validateInput(value) }\\n              className={ `initmodal-mat-input${ (this.state.inputIsFail) ? \\\" red\\\" : \\\"\\\" }${ (this.state.inputIsSuccess) ? \\\" green\\\" : \\\"\\\" }` }\\n            />\\n            <button\\n                className={ `initmodal-mat-submit${ (this.props.global.inGame) ? \\\" started\\\" : \\\"\\\" }` }\\n                onClick={ this.startGame }>\\n                    Start game\\n                </button>\\n          </div>\\n        </div>\\n      );\\n    }\\n}\\n\\nconst mapStateToProps = ({ global }) => ({\\n    global\\n});\\n\\nconst mapActionsToProps = {\\n    startGame: () => ({ type: 'INITIALIZE_GAME', payload: true })\\n}\\n  \\nexport default connect(\\n    mapStateToProps,\\n    mapActionsToProps\\n)(Initmodal);\",\"import React, { Component } from 'react';\\nimport { connect } from 'react-redux';\\n\\nimport Card from './Card';\\n\\nclass Cards extends Component {\\n    render() {\\n        return(\\n            <div className={ `part-cards ${ this.props.type.toLowerCase() } ${ this.props.target.toLowerCase() }` }>\\n                {\\n                    (this.props.global.inGame && this.props.global.playerDesk && this.props.global.botDesk) ? (\\n                        this.props.global[(this.props.target === \\\"player\\\") ? \\\"playerDesk\\\" : \\\"botDesk\\\"].map((session, index) => (\\n                            <Card\\n                                key={ index }\\n                                value={ (this.props.target === \\\"player\\\") ? session : \\\"\\\" }\\n                            />\\n                        ))\\n                    ) : null\\n                }\\n            </div>\\n        );\\n    }\\n}\\n\\nconst mapStateToProps = ({ global }) => ({\\n  global\\n});\\n\\nexport default connect(\\n  mapStateToProps\\n)(Cards);\\n\",\"import React, {\\n  Component,\\n  Fragment\\n} from 'react';\\nimport { connect } from 'react-redux';\\n\\nimport Desk from './components/Desk';\\nimport Initmodal from './components/Initmodal';\\nimport Cards from './components/Cards';\\n\\nclass Part extends Component {\\n  render() {\\n    return(\\n      <div className={ `part ${ this.props.type.toLowerCase() } ${ this.props.currentTurn }` }>\\n        <Cards\\n          type={ this.props.type }\\n          target={ this.props.target }\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nclass App extends Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      initModal: false\\n    }\\n  }\\n\\n  componentDidMount() {\\n    this.setState(() => ({ initModal: true }));\\n  }\\n\\n  render() {\\n    return(\\n      <Fragment>\\n        {\\n          (!this.props.global.isLoop && !this.props.global.winMessage) ? (\\n            <Fragment>\\n              <Initmodal />\\n              <Part\\n                type=\\\"top\\\"\\n                target=\\\"bot\\\"\\n                currentTurn={ (this.props.global) ? {\\\"BOT_TURN\\\": \\\"bot\\\", \\\"USER_TURN\\\": \\\"user\\\"}[this.props.global.currentTurn] : \\\"\\\" }\\n              />\\n              <Desk />\\n              <Part\\n                type=\\\"bottom\\\"\\n                target=\\\"player\\\"\\n                currentTurn={ (this.props.global) ? {\\\"BOT_TURN\\\": \\\"bot\\\", \\\"USER_TURN\\\": \\\"user\\\"}[this.props.global.currentTurn] : \\\"\\\" }\\n              />\\n            </Fragment>    \\n          ) : (\\n            (this.props.global.isLoop) ? (\\n              <span className=\\\"alertion\\\">TIE!</span>\\n            ) : (\\n              <span className=\\\"alertion\\\">{ this.props.global.winMessage }</span>\\n            )\\n          )\\n        }\\n        \\n      </Fragment>\\n    );\\n  }\\n}\\n\\nconst mapStateToProps = ({ global }) => ({\\n  global\\n});\\n\\nexport default connect(\\n  mapStateToProps\\n)(App);\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"const rules = {\\n    deskSize: 10, // cards in game desk\\n    minCard: 1, // minimal card value\\n    maxCard: 10, // maximal card value\\n    userDeskSize: 4 // cards in user desk\\n}\\n\\nexport default rules;\",\"import rules from '../rules';\\n\\nfunction reducer(state = {}, { type, payload }) {\\n    let a = Object.assign({}, state);\\n\\n    let gen = () => {\\n        if(\\n            !Number.isInteger(a.deskSize) || a.deskSize > 0\\n        ) {\\n            let list = [];\\n            for(let ma = rules.minCard; ma <= rules.maxCard; ma++) { // arr range\\n                list.push(ma);\\n            }\\n\\n            let b = [];\\n            for(let ma = 0; ma < ((!Number.isInteger(a.deskSize) || a.deskSize > rules.userDeskSize) ? rules.userDeskSize : a.gameDesk); ma++) {\\n                b.push(list[Math.floor(Math.random() * list.length)]);\\n            }\\n\\n            if(a.deskSize) a.deskSize -= rules.userDeskSize;\\n            return b;\\n        } else if(\\n            a.deskSize <= 0 &&\\n            (\\n                (a.botDesk && !a.botDesk.length) ||\\n                (a.playerDesk && !a.playerDesk.length)\\n            )\\n        ) {\\n            if(!a.botDesk.length) {\\n                a.winMessage = \\\"Bot won!\\\";\\n            } else if(!a.playerDesk.length) {\\n                a.winMessage = \\\"Player won!\\\";\\n            }\\n            return [];\\n        } else {\\n            return [];\\n        }\\n    }\\n\\n    function execute(type, payload) {\\n        switch(type) {\\n            case 'INITIALIZE_GAME': // WARNING: Store enter point\\n                if(payload) {\\n                    a = {\\n                        deskSize: rules.deskSize,\\n                        botDesk: gen(), // [*]\\n                        playerDesk: gen(), // [*]\\n                        inGame: true,\\n                        gameDesk: [],\\n                        currentTurn: \\\"USER_TURN\\\",\\n                        isLoop: null,\\n                        winMessage: \\\"\\\"\\n                    }\\n                }\\n            break;\\n            case 'PUSH_CARD_TO_DESK':\\n                {\\n                    let b = a.gameDesk,\\n                        c = {\\n                            value: payload.value,\\n                            sender: payload.sender\\n                        },\\n                        d = {\\n                            \\\"BOT_TARGET\\\" : \\\"USER_TURN\\\",\\n                            \\\"USER_TARGET\\\" : \\\"BOT_TURN\\\"\\n                        },\\n                        e = false;\\n\\n                    if(!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) { // create new\\n                        a.gameDesk.push([c]);\\n                        e = true;\\n                        a.currentTurn = d[payload.sender];\\n                    } else if(a.gameDesk[b.length - 1].slice(-1)[0].value <= payload.value) { // beat\\n                        a.gameDesk[b.length - 1].push(c);\\n                        e = true;\\n                    }\\n    \\n                    if(e) {\\n                        a.playerDesk.splice(a.playerDesk.findIndex(io => io === payload.value), 1);\\n                        if(a.playerDesk.length === 0) {\\n                            a.playerDesk = gen();\\n                        }\\n                    }\\n                }\\n            break;\\n            case 'START_BOT_RUNNER':\\n                if(a.currentTurn === 'BOT_TURN') { // TODO: Test\\n                    let b = a.botDesk, // bot desc\\n                        d = a.gameDesk,\\n                        e = d.slice(-1)[0], // last casted cart\\n                        g = f => {\\n                            a.botDesk.splice(a.botDesk.findIndex(io => io === f), 1);\\n                            if(a.botDesk.length === 0) {\\n                                a.botDesk = gen();\\n                            }\\n                        }\\n            \\n                    if(!e || e.length !== 1) { // create new\\n                        a.gameDesk.push([{\\n                            value: b[0],\\n                            sender: \\\"BOT_TARGET\\\"\\n                        }]);\\n                        g(b[0]);\\n                        a.currentTurn = \\\"USER_TURN\\\";\\n                    } else { // beat\\n                        let f = Infinity; // best answer\\n                        a.botDesk.forEach(io => {\\n                            if(io < f && io >= e.slice(-1)[0].value) {\\n                                f = io;\\n                            }\\n                        });\\n            \\n                        if(isFinite(f)) { // found\\n                            a.gameDesk[a.gameDesk.length - 1].push({\\n                                value: f,\\n                                sender: \\\"BOT_TARGET\\\"\\n                            });\\n                            g(f);\\n                            execute('START_BOT_RUNNER', '');\\n                        } else { // miss\\n                            a.isLoop = (a.isLoop === null) ? false : true;\\n                            a.currentTurn = \\\"USER_TURN\\\";\\n                        }\\n                    }\\n                }\\n            break;\\n            case 'PASS_CURRENT_TURN':\\n                if(a.currentTurn === 'USER_TURN') {\\n                    a.isLoop = (a.isLoop === null) ? false : true;\\n                    a.currentTurn = \\\"BOT_TURN\\\";\\n                    execute('START_BOT_RUNNER', '');\\n                }\\n            break;\\n            case 'ADAPTIVE_CLEAR_BOARD':\\n                if(a.gameDesk && a.gameDesk.length === 4) {\\n                    a.gameDesk.splice(0, 2);\\n                }\\n            break;\\n            default:break;\\n        }\\n    }\\n    execute(type, payload);\\n\\n    return a;\\n}\\n\\nexport default reducer;\",\"import { combineReducers } from 'redux';\\nimport global from './global';\\n\\nconst reducers = combineReducers({\\n    global\\n});\\n\\nexport default reducers;\",\"// React and some stuff\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\n// Redux\\nimport { createStore } from 'redux';\\nimport { Provider } from 'react-redux';\\nimport reducers from './reducers';\\n\\nconst store = createStore(\\n    reducers,\\n    {},\\n    window.devToolsExtension && window.devToolsExtension()\\n);\\n\\nReactDOM.render(\\n    <Provider store={ store }>\\n        <App />\\n    </Provider>, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(e,t,a){e.exports=a.p+\"static/media/back.8698b6a0.png\"},14:function(e,t,a){e.exports=a.p+\"static/media/front.f6265407.jpg\"},18:function(e,t,a){e.exports=a(30)},23:function(e,t,a){},30:function(e,t,a){\"use strict\";a.r(t);var n=a(0),r=a.n(n),s=a(15),c=a.n(s),o=(a(23),a(2)),l=a(3),i=a(5),u=a(4),p=a(6),m=a(1),d=a(13),b=a.n(d),g=a(14),h=a.n(g),k=function(e){function t(){var e,a;Object(o.a)(this,t);for(var n=arguments.length,r=new Array(n),s=0;s<n;s++)r[s]=arguments[s];return(a=Object(i.a)(this,(e=Object(u.a)(t)).call.apply(e,[this].concat(r)))).cast=function(){\"BOT_TURN\"!==a.props.global.currentTurn&&(a.props.castCard({value:a.props.value,sender:\"USER_TARGET\"}),a.props.runBot(),a.props.clearBoard())},a}return Object(p.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"part-cards-card\".concat(this.props.isCasted?\" casted rotated\":\"\",\" \").concat(this.props.sender),onClick:this.cast},r.a.createElement(\"div\",{className:\"part-cards-card-front\"},r.a.createElement(\"img\",{src:b.a,className:\"part-cards-card-front-image\",alt:\"card\"})),r.a.createElement(\"div\",{className:\"part-cards-card-back\"},r.a.createElement(\"img\",{src:h.a,className:\"part-cards-card-back-image\",alt:\"card\"}),r.a.createElement(\"span\",{className:\"part-cards-card-back-mark\"},this.props.value)))}}]),t}(n.Component),T=Object(m.b)(function(e){return{global:e.global}},{castCard:function(e){return{type:\"PUSH_CARD_TO_DESK\",payload:e}},runBot:function(){return{type:\"START_BOT_RUNNER\",payload:\"\"}},clearBoard:function(){return{type:\"ADAPTIVE_CLEAR_BOARD\",payload:\"\"}}})(k),E=function(e){function t(){return Object(o.a)(this,t),Object(i.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"desk-flow-stack\"},this.props.cards.map(function(e,t){var a=e.value,n=e.sender;return r.a.createElement(T,{key:t,isCasted:!0,value:a,sender:n})}))}}]),t}(n.Component),f=function(e){function t(){return Object(o.a)(this,t),Object(i.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"desk\"},r.a.createElement(\"div\",null),r.a.createElement(\"div\",{className:\"desk-flow\"},this.props.global.gameDesk?this.props.global.gameDesk.map(function(e,t){return r.a.createElement(E,{key:t,cards:e})}):null),r.a.createElement(\"div\",{className:\"desk-cards\"},\"USER_TURN\"===this.props.global.currentTurn?r.a.createElement(\"button\",{className:\"desk-cards-pass\",onClick:this.props.passTurn},\"PASS\"):null,this.props.global.deskSize?r.a.createElement(\"img\",{src:b.a,alt:\"desk cards\",className:\"desk-cards-image\"}):null))}}]),t}(n.Component),v=Object(m.b)(function(e){return{global:e.global}},{passTurn:function(){return{type:\"PASS_CURRENT_TURN\",payload:\"\"}}})(f),O=function(e){function t(e){var a;return Object(o.a)(this,t),(a=Object(i.a)(this,Object(u.a)(t).call(this,e))).validateInput=function(e){var t=!(!e.toString()||!e.toString().replace(/ /g,\"\").length);a.setState(function(){return{inputIsFail:!t,inputIsSuccess:t}})},a.startGame=function(){a.state.inputIsSuccess&&a.props.startGame()},a.state={inputIsFail:!1,inputIsSuccess:!1},a}return Object(p.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){var e=this;return r.a.createElement(\"div\",{className:\"initmodal\".concat(this.props.global.inGame?\"\":\" visible\")},r.a.createElement(\"div\",{className:\"initmodal-mat\"},r.a.createElement(\"h1\",{className:\"initmodal-mat-title\"},\"Hi!\"),r.a.createElement(\"p\",{className:\"initmodal-mat-description\"},\"Enter your nickname\"),r.a.createElement(\"input\",{placeholder:\"Nickname\",onChange:function(t){var a=t.target.value;return e.validateInput(a)},className:\"initmodal-mat-input\".concat(this.state.inputIsFail?\" red\":\"\").concat(this.state.inputIsSuccess?\" green\":\"\")}),r.a.createElement(\"button\",{className:\"initmodal-mat-submit\".concat(this.props.global.inGame?\" started\":\"\"),onClick:this.startGame},\"Start game\")))}}]),t}(n.Component),N=Object(m.b)(function(e){return{global:e.global}},{startGame:function(){return{type:\"INITIALIZE_GAME\",payload:!0}}})(O),R=function(e){function t(){return Object(o.a)(this,t),Object(i.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){var e=this;return r.a.createElement(\"div\",{className:\"part-cards \".concat(this.props.type.toLowerCase(),\" \").concat(this.props.target.toLowerCase())},this.props.global.inGame&&this.props.global.playerDesk&&this.props.global.botDesk?this.props.global[\"player\"===this.props.target?\"playerDesk\":\"botDesk\"].map(function(t,a){return r.a.createElement(T,{key:a,value:\"player\"===e.props.target?t:\"\"})}):null)}}]),t}(n.Component),y=Object(m.b)(function(e){return{global:e.global}})(R),D=function(e){function t(){return Object(o.a)(this,t),Object(i.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"part \".concat(this.props.type.toLowerCase(),\" \").concat(this.props.currentTurn)},r.a.createElement(y,{type:this.props.type,target:this.props.target}))}}]),t}(n.Component),S=function(e){function t(e){var a;return Object(o.a)(this,t),(a=Object(i.a)(this,Object(u.a)(t).call(this,e))).state={initModal:!1},a}return Object(p.a)(t,e),Object(l.a)(t,[{key:\"componentDidMount\",value:function(){this.setState(function(){return{initModal:!0}})}},{key:\"render\",value:function(){return r.a.createElement(n.Fragment,null,this.props.global.isLoop||this.props.global.winMessage?this.props.global.isLoop?r.a.createElement(\"span\",{className:\"alertion\"},\"TIE!\"):r.a.createElement(\"span\",{className:\"alertion\"},this.props.global.winMessage):r.a.createElement(n.Fragment,null,r.a.createElement(N,null),r.a.createElement(D,{type:\"top\",target:\"bot\",currentTurn:this.props.global?{BOT_TURN:\"bot\",USER_TURN:\"user\"}[this.props.global.currentTurn]:\"\"}),r.a.createElement(v,null),r.a.createElement(D,{type:\"bottom\",target:\"player\",currentTurn:this.props.global?{BOT_TURN:\"bot\",USER_TURN:\"user\"}[this.props.global.currentTurn]:\"\"})))}}]),t}(n.Component),j=Object(m.b)(function(e){return{global:e.global}})(S);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var _=a(8),U={deskSize:10,minCard:1,maxCard:10,userDeskSize:4};var w=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0,a=t.type,n=t.payload,r=Object.assign({},e),s=function(){if(!Number.isInteger(r.deskSize)||r.deskSize>0){for(var e=[],t=U.minCard;t<=U.maxCard;t++)e.push(t);for(var a=[],n=0;n<(!Number.isInteger(r.deskSize)||r.deskSize>U.userDeskSize?U.userDeskSize:r.gameDesk);n++)a.push(e[Math.floor(Math.random()*e.length)]);return r.deskSize&&(r.deskSize-=U.userDeskSize),a}return r.deskSize<=0&&(r.botDesk&&!r.botDesk.length||r.playerDesk&&!r.playerDesk.length)?(r.botDesk.length?r.playerDesk.length||(r.winMessage=\"Player won!\"):r.winMessage=\"Bot won!\",[]):[]};return function e(t,a){switch(t){case\"INITIALIZE_GAME\":a&&(r={deskSize:U.deskSize,botDesk:s(),playerDesk:s(),inGame:!0,gameDesk:[],currentTurn:\"USER_TURN\",isLoop:null,winMessage:\"\"});break;case\"PUSH_CARD_TO_DESK\":var n=r.gameDesk,c={value:a.value,sender:a.sender},o=!1;n.slice(-1)[0]&&1===n.slice(-1)[0].length?r.gameDesk[n.length-1].slice(-1)[0].value<=a.value&&(r.gameDesk[n.length-1].push(c),o=!0):(r.gameDesk.push([c]),o=!0,r.currentTurn={BOT_TARGET:\"USER_TURN\",USER_TARGET:\"BOT_TURN\"}[a.sender]),o&&(r.playerDesk.splice(r.playerDesk.findIndex(function(e){return e===a.value}),1),0===r.playerDesk.length&&(r.playerDesk=s()));break;case\"START_BOT_RUNNER\":if(\"BOT_TURN\"===r.currentTurn){var l=r.botDesk,i=r.gameDesk.slice(-1)[0],u=function(e){r.botDesk.splice(r.botDesk.findIndex(function(t){return t===e}),1),0===r.botDesk.length&&(r.botDesk=s())};if(i&&1===i.length){var p=1/0;r.botDesk.forEach(function(e){e<p&&e>=i.slice(-1)[0].value&&(p=e)}),isFinite(p)?(r.gameDesk[r.gameDesk.length-1].push({value:p,sender:\"BOT_TARGET\"}),u(p),e(\"START_BOT_RUNNER\",\"\")):(r.isLoop=null!==r.isLoop,r.currentTurn=\"USER_TURN\")}else r.gameDesk.push([{value:l[0],sender:\"BOT_TARGET\"}]),u(l[0]),r.currentTurn=\"USER_TURN\"}break;case\"PASS_CURRENT_TURN\":\"USER_TURN\"===r.currentTurn&&(r.isLoop=null!==r.isLoop,r.currentTurn=\"BOT_TURN\",e(\"START_BOT_RUNNER\",\"\"));break;case\"ADAPTIVE_CLEAR_BOARD\":r.gameDesk&&4===r.gameDesk.length&&r.gameDesk.splice(0,2)}}(a,n),r},C=Object(_.b)({global:w}),A=Object(_.c)(C,{},window.devToolsExtension&&window.devToolsExtension());c.a.render(r.a.createElement(m.a,{store:A},r.a.createElement(j,null)),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[18,2,1]]]);","extractedComments":[]}