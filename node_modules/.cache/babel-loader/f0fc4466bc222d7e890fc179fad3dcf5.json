{"ast":null,"code":"import rules from '../rules';\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  var a = Object.assign({}, state);\n\n  var gen = function gen() {\n    if (!a.deskSize || a.deskSize > 0) {\n      var list = [];\n\n      for (var ma = rules.minCard; ma <= rules.maxCard; ma++) {\n        // arr range\n        list.push(ma);\n      }\n\n      var b = [];\n\n      for (var _ma = 0; _ma < (!a.deskSize || a.deskSize > rules.userDeskSize ? rules.userDeskSize : a.gameDesk); _ma++) {\n        b.push(list[Math.floor(Math.random() * list.length)]);\n      }\n\n      if (a.deskSize) a.deskSize -= rules.userDeskSize;\n      return b;\n    } else if (console.log(a.deskSize <= 0, a.botDesk && !a.botDesk.length, a.playerDesk && !a.playerDesk.length) || a.deskSize <= 0 && (a.botDesk && !a.botDesk.length || a.playerDesk && !a.playerDesk.length)) {\n      if (!a.botDesk.length) {\n        a.inLoop = \"Bot won!\";\n      } else if (!a.playerDesk.length) {\n        a.inLoop = \"Player won!\";\n      }\n\n      return [];\n    } else {\n      return [];\n    }\n  };\n\n  function execute(type, payload) {\n    switch (type) {\n      case 'INITIALIZE_GAME':\n        // WARNING: Store enter point\n        if (payload) {\n          a = {\n            deskSize: rules.deskSize,\n            botDesk: gen(),\n            // [*]\n            playerDesk: gen(),\n            // [*]\n            inGame: true,\n            gameDesk: [],\n            currentTurn: \"USER_TURN\",\n            isLoop: null\n          };\n        }\n\n        break;\n\n      case 'PUSH_CARD_TO_DESK':\n        {\n          var b = a.gameDesk,\n              c = {\n            value: payload.value,\n            sender: payload.sender\n          },\n              d = {\n            \"BOT_TARGET\": \"USER_TURN\",\n            \"USER_TARGET\": \"BOT_TURN\"\n          },\n              e = false;\n\n          if (!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) {\n            // create new\n            a.gameDesk.push([c]);\n            e = true;\n          } else if (a.gameDesk[b.length - 1].slice(-1)[0].value <= payload.value) {\n            // beat\n            a.gameDesk[b.length - 1].push(c);\n            e = true;\n          }\n\n          if (e) {\n            a.playerDesk.splice(a.playerDesk.findIndex(function (io) {\n              return io === payload.value;\n            }), 1);\n\n            if (a.playerDesk.length === 0) {\n              a.playerDesk = gen();\n            }\n\n            a.currentTurn = d[payload.sender];\n          }\n        }\n        break;\n\n      case 'START_BOT_RUNNER':\n        if (a.currentTurn === 'BOT_TURN') {\n          // TODO: Test\n          var _b = a.botDesk,\n              // bot desc\n          _d = a.gameDesk,\n              _e = _d.slice(-1)[0],\n              // last casted cart\n          g = function g(f) {\n            a.botDesk.splice(a.botDesk.findIndex(function (io) {\n              return io === f;\n            }), 1);\n\n            if (a.botDesk.length === 0) {\n              a.botDesk = gen();\n            }\n          };\n\n          if (!_e || _e.length !== 1) {\n            a.gameDesk.push([{\n              value: _b[0],\n              sender: \"BOT_TARGET\"\n            }]);\n            g(_b[0]);\n            a.currentTurn = \"USER_TURN\";\n          } else {\n            var f = Infinity; // best answer\n\n            a.botDesk.forEach(function (io) {\n              if (io < f && io >= _e.slice(-1)[0].value) {\n                f = io;\n              }\n            });\n\n            if (isFinite(f)) {\n              // found\n              a.gameDesk[a.gameDesk.length - 1].push({\n                value: f,\n                sender: \"BOT_TARGET\"\n              });\n              g(f);\n              execute('START_BOT_RUNNER', '');\n            } else {\n              // miss\n              a.isLoop = a.isLoop === null ? false : true;\n              a.currentTurn = \"USER_TURN\";\n            }\n          }\n        }\n\n        break;\n\n      case 'PASS_CURRENT_TURN':\n        if (a.currentTurn === 'USER_TURN') {\n          a.isLoop = a.isLoop === null ? false : true;\n          a.currentTurn = \"BOT_TURN\";\n          execute('START_BOT_RUNNER', '');\n        }\n\n        break;\n\n      case 'ADAPTIVE_CLEAR_BOARD':\n        if (a.gameDesk && a.gameDesk.length === 4) {\n          a.gameDesk.splice(0, 2);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  execute(type, payload);\n  return a;\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/olesodynets/Documents/Coding/htdocs/card-play/src/reducers/global.js"],"names":["rules","reducer","state","type","payload","a","Object","assign","gen","deskSize","list","ma","minCard","maxCard","push","b","userDeskSize","gameDesk","Math","floor","random","length","console","log","botDesk","playerDesk","inLoop","execute","inGame","currentTurn","isLoop","c","value","sender","d","e","slice","splice","findIndex","io","g","f","Infinity","forEach","isFinite"],"mappings":"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","sourcesContent":["import rules from '../rules';\n\nfunction reducer(state = {}, { type, payload }) {\n    let a = Object.assign({}, state);\n\n    let gen = () => {\n        if(\n            !a.deskSize || a.deskSize > 0\n        ) {\n            let list = [];\n            for(let ma = rules.minCard; ma <= rules.maxCard; ma++) { // arr range\n                list.push(ma);\n            }\n\n            let b = [];\n            for(let ma = 0; ma < ((!a.deskSize || a.deskSize > rules.userDeskSize) ? rules.userDeskSize : a.gameDesk); ma++) {\n                b.push(list[Math.floor(Math.random() * list.length)]);\n            }\n\n            if(a.deskSize) a.deskSize -= rules.userDeskSize;\n            return b;\n        } else if(\n            console.log(a.deskSize <= 0, a.botDesk && !a.botDesk.length, a.playerDesk && !a.playerDesk.length) ||\n            a.deskSize <= 0 &&\n            (\n                (a.botDesk && !a.botDesk.length) ||\n                (a.playerDesk && !a.playerDesk.length)\n            )\n        ) {\n            if(!a.botDesk.length) {\n                a.inLoop = \"Bot won!\";\n            } else if(!a.playerDesk.length) {\n                a.inLoop = \"Player won!\";\n            }\n            return [];\n        } else {\n            return [];\n        }\n    }\n\n    function execute(type, payload) {\n        switch(type) {\n            case 'INITIALIZE_GAME': // WARNING: Store enter point\n                if(payload) {\n                    a = {\n                        deskSize: rules.deskSize,\n                        botDesk: gen(), // [*]\n                        playerDesk: gen(), // [*]\n                        inGame: true,\n                        gameDesk: [],\n                        currentTurn: \"USER_TURN\",\n                        isLoop: null\n                    }\n                }\n            break;\n            case 'PUSH_CARD_TO_DESK':\n                {\n                    let b = a.gameDesk,\n                        c = {\n                            value: payload.value,\n                            sender: payload.sender\n                        },\n                        d = {\n                            \"BOT_TARGET\" : \"USER_TURN\",\n                            \"USER_TARGET\" : \"BOT_TURN\"\n                        },\n                        e = false;\n\n                    if(!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) { // create new\n                        a.gameDesk.push([c]);\n                        e = true;\n                    } else if(a.gameDesk[b.length - 1].slice(-1)[0].value <= payload.value) { // beat\n                        a.gameDesk[b.length - 1].push(c);\n                        e = true;\n                    }\n    \n                    if(e) {\n                        a.playerDesk.splice(a.playerDesk.findIndex(io => io === payload.value), 1);\n                        if(a.playerDesk.length === 0) {\n                            a.playerDesk = gen();\n                        }\n                        a.currentTurn = d[payload.sender];\n                    }\n                }\n            break;\n            case 'START_BOT_RUNNER':\n                if(a.currentTurn === 'BOT_TURN') { // TODO: Test\n                    let b = a.botDesk, // bot desc\n                        d = a.gameDesk,\n                        e = d.slice(-1)[0], // last casted cart\n                        g = f => {\n                            a.botDesk.splice(a.botDesk.findIndex(io => io === f), 1);\n                            if(a.botDesk.length === 0) {\n                                a.botDesk = gen();\n                            }\n                        }\n            \n                    if(!e || e.length !== 1) {\n                        a.gameDesk.push([{\n                            value: b[0],\n                            sender: \"BOT_TARGET\"\n                        }]);\n                        g(b[0]);\n                        a.currentTurn = \"USER_TURN\";\n                    } else {\n                        let f = Infinity; // best answer\n                        a.botDesk.forEach(io => {\n                            if(io < f && io >= e.slice(-1)[0].value) {\n                                f = io;\n                            }\n                        });\n            \n                        if(isFinite(f)) { // found\n                            a.gameDesk[a.gameDesk.length - 1].push({\n                                value: f,\n                                sender: \"BOT_TARGET\"\n                            });\n                            g(f);\n                            execute('START_BOT_RUNNER', '');\n                        } else { // miss\n                            a.isLoop = (a.isLoop === null) ? false : true;\n                            a.currentTurn = \"USER_TURN\";\n                        }\n                    }\n                }\n            break;\n            case 'PASS_CURRENT_TURN':\n                if(a.currentTurn === 'USER_TURN') {\n                    a.isLoop = (a.isLoop === null) ? false : true;\n                    a.currentTurn = \"BOT_TURN\";\n                    execute('START_BOT_RUNNER', '');\n                }\n            break;\n            case 'ADAPTIVE_CLEAR_BOARD':\n                if(a.gameDesk && a.gameDesk.length === 4) {\n                    a.gameDesk.splice(0, 2);\n                }\n            break;\n            default:break;\n        }\n    }\n    execute(type, payload);\n\n    return a;\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}