{"ast":null,"code":"import rules from '../rules';\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  var a = Object.assign({}, state);\n\n  switch (type) {\n    case 'INITIALIZE_GAME':\n      // WARNING: Store enter point\n      if (payload) {\n        var list = [];\n\n        for (var ma = rules.minCard; ma <= rules.maxCard; ma++) {\n          list.push(ma);\n        }\n\n        var gen = function gen() {\n          var b = [];\n          console.log(rules.userDeskSize);\n          console.lgo(\"A\");\n\n          for (var _ma = 0; _ma < rules.userDeskSize; _ma++) {\n            console.log(\"A\");\n            b.push(list[Math.floor(Math.random() * list.length)]);\n          }\n\n          return b;\n        };\n\n        console.log(gen());\n        a = {\n          deskSize: rules.deskSize,\n          botDesk: [],\n          playerDesk: [],\n          inGame: true\n        };\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  return a;\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/olesodynets/Documents/Coding/htdocs/card-play/src/reducers/global.js"],"names":["rules","reducer","state","type","payload","a","Object","assign","list","ma","minCard","maxCard","push","gen","b","console","log","userDeskSize","lgo","Math","floor","random","length","deskSize","botDesk","playerDesk","inGame"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,SAASC,OAAT,GAAgD;AAAA,MAA/BC,KAA+B,uEAAvB,EAAuB;;AAAA;AAAA,MAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAC5C,MAAIC,CAAC,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,CAAR;;AAEA,UAAOC,IAAP;AACI,SAAK,iBAAL;AAAwB;AACpB,UAAGC,OAAH,EAAY;AACR,YAAII,IAAI,GAAG,EAAX;;AACA,aAAI,IAAIC,EAAE,GAAGT,KAAK,CAACU,OAAnB,EAA4BD,EAAE,IAAIT,KAAK,CAACW,OAAxC,EAAiDF,EAAE,EAAnD,EAAuD;AACnDD,UAAAA,IAAI,CAACI,IAAL,CAAUH,EAAV;AACH;;AACD,YAAII,GAAG,GAAG,SAANA,GAAM,GAAM;AACZ,cAAIC,CAAC,GAAG,EAAR;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAK,CAACiB,YAAlB;AACAF,UAAAA,OAAO,CAACG,GAAR,CAAY,GAAZ;;AACA,eAAI,IAAIT,GAAE,GAAG,CAAb,EAAgBA,GAAE,GAAGT,KAAK,CAACiB,YAA3B,EAAyCR,GAAE,EAA3C,EAA+C;AAC3CM,YAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAF,YAAAA,CAAC,CAACF,IAAF,CAAOJ,IAAI,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,IAAI,CAACc,MAAhC,CAAD,CAAX;AACH;;AAED,iBAAOR,CAAP;AACH,SAVD;;AAYAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,EAAf;AAEAR,QAAAA,CAAC,GAAG;AACAkB,UAAAA,QAAQ,EAAEvB,KAAK,CAACuB,QADhB;AAEAC,UAAAA,OAAO,EAAE,EAFT;AAGAC,UAAAA,UAAU,EAAE,EAHZ;AAIAC,UAAAA,MAAM,EAAE;AAJR,SAAJ;AAMH;;AACL;;AACA;AAAQ;AA7BZ;;AAgCA,SAAOrB,CAAP;AACH;;AAED,eAAeJ,OAAf","sourcesContent":["import rules from '../rules';\n\nfunction reducer(state = {}, { type, payload }) {\n    let a = Object.assign({}, state);\n\n    switch(type) {\n        case 'INITIALIZE_GAME': // WARNING: Store enter point\n            if(payload) {\n                let list = [];\n                for(let ma = rules.minCard; ma <= rules.maxCard; ma++) {\n                    list.push(ma);\n                }\n                let gen = () => {\n                    let b = [];\n                    console.log(rules.userDeskSize);\n                    console.lgo(\"A\");\n                    for(let ma = 0; ma < rules.userDeskSize; ma++) {\n                        console.log(\"A\");\n                        b.push(list[Math.floor(Math.random() * list.length)]);\n                    }\n\n                    return b;\n                }\n\n                console.log(gen());\n                \n                a = {\n                    deskSize: rules.deskSize,\n                    botDesk: [],\n                    playerDesk: [],\n                    inGame: true\n                }\n            }\n        break;\n        default:break;\n    }\n\n    return a;\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}