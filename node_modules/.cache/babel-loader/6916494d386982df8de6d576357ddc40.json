{"ast":null,"code":"import rules from '../rules';\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  var a = Object.assign({}, state);\n\n  var gen = function gen() {\n    var b = [];\n\n    for (var ma = 0; ma < rules.userDeskSize; ma++) {\n      b.push(list[Math.floor(Math.random() * list.length)]);\n    }\n\n    return b;\n  };\n\n  function execute(type, payload) {\n    switch (type) {\n      case 'INITIALIZE_GAME':\n        // WARNING: Store enter point\n        if (payload) {\n          var _list = [];\n\n          for (var ma = rules.minCard; ma <= rules.maxCard; ma++) {\n            _list.push(ma);\n          }\n\n          a = {\n            deskSize: rules.deskSize,\n            botDesk: gen(),\n            // [*]\n            playerDesk: gen(),\n            // [*]\n            inGame: true,\n            gameDesk: [],\n            currentTurn: \"USER_TURN\",\n            isLoop: null\n          };\n        }\n\n        break;\n\n      case 'PUSH_CARD_TO_DESK':\n        {\n          var b = a.gameDesk,\n              c = {\n            value: payload.value,\n            sender: payload.sender\n          },\n              d = {\n            \"BOT_TARGET\": \"USER_TURN\",\n            \"USER_TARGET\": \"BOT_TURN\"\n          };\n\n          if (!b.slice(-1)[0] || a.gameDesk[b.length - 1].slice(-1)[0].value < payload.value) {\n            if (!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) {\n              // create new\n              a.gameDesk.push([c]);\n            } else {\n              // beat\n              a.gameDesk[b.length - 1].push(c);\n            }\n          }\n\n          a.playerDesk.splice(a.playerDesk.findIndex(function (io) {\n            return io === payload.value;\n          }), 1);\n\n          if (a.playerDesk.length === 0) {\n            a.playerDesk = gen();\n          }\n\n          a.currentTurn = d[payload.sender];\n        }\n        break;\n\n      case 'START_BOT_RUNNER':\n        {\n          /* My first an - explained */\n          var _b = a.botDesk,\n              // bot desc\n          _d = a.gameDesk,\n              e = _d.slice(-1)[0],\n              // last casted cart\n          g = function g(f) {\n            a.botDesk.splice(a.botDesk.findIndex(function (io) {\n              return io === f;\n            }), 1);\n\n            if (a.botDesk.length === 0) {\n              a.botDesk = gen();\n            }\n          };\n\n          if (!e || e.length !== 1) {\n            a.gameDesk.push([{\n              value: _b[0],\n              sender: \"BOT_TARGET\"\n            }]);\n            g(_b[0]);\n            a.currentTurn = \"USER_TURN\";\n          } else {\n            var f = Infinity; // best answer\n\n            a.botDesk.forEach(function (io) {\n              if (io < f && io > e.slice(-1)[0].value) {\n                f = io;\n              }\n            });\n\n            if (isFinite(f)) {\n              // found\n              a.gameDesk[a.gameDesk.length - 1].push({\n                value: f,\n                sender: \"BOT_TARGET\"\n              });\n              g(f);\n              execute('START_BOT_RUNNER', '');\n            } else {\n              // miss\n              a.isLoop = a.isLoop === null ? false : true;\n              a.currentTurn = \"USER_TURN\";\n            }\n          }\n        }\n        break;\n\n      case 'PASS_CURRENT_TURN':\n        if (a.currentTurn === 'USER_TURN') {\n          a.isLoop = a.isLoop === null ? false : true;\n          a.currentTurn = \"BOT_TURN\";\n          execute('START_BOT_RUNNER', '');\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  execute(type, payload);\n  return a;\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/olesodynets/Documents/Coding/htdocs/card-play/src/reducers/global.js"],"names":["rules","reducer","state","type","payload","a","Object","assign","gen","b","ma","userDeskSize","push","list","Math","floor","random","length","execute","minCard","maxCard","deskSize","botDesk","playerDesk","inGame","gameDesk","currentTurn","isLoop","c","value","sender","d","slice","splice","findIndex","io","e","g","f","Infinity","forEach","isFinite"],"mappings":"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","sourcesContent":["import rules from '../rules';\n\nfunction reducer(state = {}, { type, payload }) {\n    let a = Object.assign({}, state);\n\n    let gen = () => {\n        let b = [];\n        for(let ma = 0; ma < rules.userDeskSize; ma++) {\n            b.push(list[Math.floor(Math.random() * list.length)]);\n        }\n\n        return b;\n    }\n\n    function execute(type, payload) {\n        switch(type) {\n            case 'INITIALIZE_GAME': // WARNING: Store enter point\n                if(payload) {\n                    let list = [];\n                    for(let ma = rules.minCard; ma <= rules.maxCard; ma++) {\n                        list.push(ma);\n                    }\n                    \n                    a = {\n                        deskSize: rules.deskSize,\n                        botDesk: gen(), // [*]\n                        playerDesk: gen(), // [*]\n                        inGame: true,\n                        gameDesk: [],\n                        currentTurn: \"USER_TURN\",\n                        isLoop: null\n                    }\n                }\n            break;\n            case 'PUSH_CARD_TO_DESK':\n                {\n                    let b = a.gameDesk,\n                        c = {\n                            value: payload.value,\n                            sender: payload.sender\n                        },\n                        d = {\n                            \"BOT_TARGET\" : \"USER_TURN\",\n                            \"USER_TARGET\" : \"BOT_TURN\"\n                        }\n                    if(!b.slice(-1)[0] || a.gameDesk[b.length - 1].slice(-1)[0].value < payload.value) {\n                        if(!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) { // create new\n                            a.gameDesk.push([c]);\n                        } else { // beat\n                            a.gameDesk[b.length - 1].push(c);\n                        }\n                    }\n    \n                    a.playerDesk.splice(a.playerDesk.findIndex(io => io === payload.value), 1);\n                    if(a.playerDesk.length === 0) {\n                        a.playerDesk = gen();\n                    }\n                    a.currentTurn = d[payload.sender];\n                }\n            break;\n            case 'START_BOT_RUNNER':\n                {\n                    /* My first an - explained */\n            \n                    let b = a.botDesk, // bot desc\n                        d = a.gameDesk,\n                        e = d.slice(-1)[0], // last casted cart\n                        g = f => {\n                            a.botDesk.splice(a.botDesk.findIndex(io => io === f), 1);\n                            if(a.botDesk.length === 0) {\n                                a.botDesk = gen();\n                            }\n                        }\n            \n                    if(!e || e.length !== 1) {\n                        a.gameDesk.push([{\n                            value: b[0],\n                            sender: \"BOT_TARGET\"\n                        }]);\n                        g(b[0]);\n                        a.currentTurn = \"USER_TURN\";\n                    } else {\n                        let f = Infinity; // best answer\n                        a.botDesk.forEach(io => {\n                            if(io < f && io > e.slice(-1)[0].value) {\n                                f = io;\n                            }\n                        });\n            \n                        if(isFinite(f)) { // found\n                            a.gameDesk[a.gameDesk.length - 1].push({\n                                value: f,\n                                sender: \"BOT_TARGET\"\n                            });\n                            g(f);\n                            execute('START_BOT_RUNNER', '');\n                        } else { // miss\n                            a.isLoop = (a.isLoop === null) ? false : true;\n                            a.currentTurn = \"USER_TURN\";\n                        }\n                    }\n                }\n            break;\n            case 'PASS_CURRENT_TURN':\n                if(a.currentTurn === 'USER_TURN') {\n                    a.isLoop = (a.isLoop === null) ? false : true;\n                    a.currentTurn = \"BOT_TURN\";\n                    execute('START_BOT_RUNNER', '');\n                }\n            break;\n            default:break;\n        }\n    }\n    execute(type, payload);\n\n    return a;\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}