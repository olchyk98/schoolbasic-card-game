{"ast":null,"code":"import rules from '../rules';\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  var a = Object.assign({}, state);\n\n  function START_BOT_RUNNER() {\n    /* My first an - explained */\n    var b = a.botDesk,\n        // bot desc\n    d = a.gameDesk,\n        e = d.slice(-1)[0]; // last casted cart\n\n    if (!e || e.length !== 1) {\n      a.gameDesk.push([{\n        value: b[0],\n        sender: \"BOT_TARGET\"\n      }]);\n      a.currentTurn = \"USER_TURN\";\n    } else {\n      var f = Infinity; // best answer\n\n      a.botDesk.forEach(function (io) {\n        if (io < f && io > e.slice(-1)[0].value) {\n          f = io;\n        }\n      });\n\n      if (isFinite(f)) {\n        // found\n        a.gameDesk[a.gameDesk.length - 1].push({\n          value: f,\n          sender: \"BOT_TARGET\"\n        });\n        a.botDesk.splice(a.botDesk.findIndex(function (io) {\n          return io === f;\n        }), 1);\n        START_BOT_RUNNER();\n      } else {\n        a.currentTurn = \"USER_TURN\";\n      }\n    }\n  }\n\n  switch (type) {\n    case 'INITIALIZE_GAME':\n      // WARNING: Store enter point\n      if (payload) {\n        var list = [];\n\n        for (var ma = rules.minCard; ma <= rules.maxCard; ma++) {\n          list.push(ma);\n        }\n\n        var gen = function gen() {\n          var b = [];\n\n          for (var _ma = 0; _ma < rules.userDeskSize; _ma++) {\n            b.push(list[Math.floor(Math.random() * list.length)]);\n          }\n\n          return b;\n        };\n\n        a = {\n          deskSize: rules.deskSize,\n          botDesk: gen(),\n          // [*]\n          playerDesk: gen(),\n          // [*]\n          inGame: true,\n          gameDesk: [],\n          currentTurn: \"USER_TURN\"\n        };\n      }\n\n      break;\n\n    case 'PUSH_CARD_TO_DESK':\n      {\n        var b = a.gameDesk,\n            c = {\n          value: payload.value,\n          sender: payload.sender\n        },\n            d = {\n          \"BOT_TARGET\": \"USER_TURN\",\n          \"USER_TARGET\": \"BOT_TURN\"\n        };\n\n        if (!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) {\n          // create new\n          a.gameDesk.push([c]);\n        } else {\n          // beat\n          if (a.gameDesk[b.length - 1].slice(-1)[0].value < payload.value) {\n            a.gameDesk[b.length - 1].push(c);\n          }\n        }\n\n        a.playerDesk.splice(a.playerDesk.findIndex(function (io) {\n          return io === payload.value;\n        }), 1);\n        a.currentTurn = d[payload.sender];\n      }\n      break;\n\n    case 'START_BOT_RUNNER':\n      START_BOT_RUNNER();\n      break;\n\n    case 'PASS_CURRENT_TURN':\n      console.log(a.currentTurn);\n\n      if (a.currentTurn === 'USER_TURN') {\n        console.log(\"A\");\n        a.currentTurn = \"BOT_TURN\";\n        START_BOT_RUNNER();\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  return a;\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/olesodynets/Documents/Coding/htdocs/card-play/src/reducers/global.js"],"names":["rules","reducer","state","type","payload","a","Object","assign","START_BOT_RUNNER","b","botDesk","d","gameDesk","e","slice","length","push","value","sender","currentTurn","f","Infinity","forEach","io","isFinite","splice","findIndex","list","ma","minCard","maxCard","gen","userDeskSize","Math","floor","random","deskSize","playerDesk","inGame","c","console","log"],"mappings":"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","sourcesContent":["import rules from '../rules';\n\nfunction reducer(state = {}, { type, payload }) {\n    let a = Object.assign({}, state);\n\n    function START_BOT_RUNNER() {\n        /* My first an - explained */\n\n        let b = a.botDesk, // bot desc\n            d = a.gameDesk,\n            e = d.slice(-1)[0]; // last casted cart\n\n        if(!e || e.length !== 1) {\n            a.gameDesk.push([{\n                value: b[0],\n                sender: \"BOT_TARGET\"\n            }]);\n            a.currentTurn = \"USER_TURN\";\n        } else {\n            let f = Infinity; // best answer\n            a.botDesk.forEach(io => {\n                if(io < f && io > e.slice(-1)[0].value) {\n                    f = io;\n                }\n            });\n\n            if(isFinite(f)) { // found\n                a.gameDesk[a.gameDesk.length - 1].push({\n                    value: f,\n                    sender: \"BOT_TARGET\"\n                });\n                a.botDesk.splice(a.botDesk.findIndex(io => io === f), 1);\n                START_BOT_RUNNER();\n            } else {\n                a.currentTurn = \"USER_TURN\";\n            }\n        }\n    }\n\n    switch(type) {\n        case 'INITIALIZE_GAME': // WARNING: Store enter point\n            if(payload) {\n                let list = [];\n                for(let ma = rules.minCard; ma <= rules.maxCard; ma++) {\n                    list.push(ma);\n                }\n                let gen = () => {\n                    let b = [];\n                    for(let ma = 0; ma < rules.userDeskSize; ma++) {\n                        b.push(list[Math.floor(Math.random() * list.length)]);\n                    }\n\n                    return b;\n                }\n                \n                a = {\n                    deskSize: rules.deskSize,\n                    botDesk: gen(), // [*]\n                    playerDesk: gen(), // [*]\n                    inGame: true,\n                    gameDesk: [],\n                    currentTurn: \"USER_TURN\"\n                }\n            }\n        break;\n        case 'PUSH_CARD_TO_DESK':\n            {\n                let b = a.gameDesk,\n                    c = {\n                        value: payload.value,\n                        sender: payload.sender\n                    },\n                    d = {\n                        \"BOT_TARGET\" : \"USER_TURN\",\n                        \"USER_TARGET\" : \"BOT_TURN\"\n                    }\n                if(!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) { // create new\n                    a.gameDesk.push([c]);\n                } else { // beat\n                    if(a.gameDesk[b.length - 1].slice(-1)[0].value < payload.value) {\n                        a.gameDesk[b.length - 1].push(c);\n                    }\n                }\n\n                a.playerDesk.splice(a.playerDesk.findIndex(io => io === payload.value), 1);\n                a.currentTurn = d[payload.sender];\n            }\n        break;\n        case 'START_BOT_RUNNER':\n            START_BOT_RUNNER();\n        break;\n        case 'PASS_CURRENT_TURN':\n            console.log(a.currentTurn);\n            if(a.currentTurn === 'USER_TURN') {\n                console.log(\"A\")\n                a.currentTurn = \"BOT_TURN\";\n                START_BOT_RUNNER();\n            }\n        break;\n        default:break;\n    }\n\n    return a;\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}