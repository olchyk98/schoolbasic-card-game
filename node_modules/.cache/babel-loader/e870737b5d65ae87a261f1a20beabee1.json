{"ast":null,"code":"import rules from '../rules';\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  var a = Object.assign({}, state);\n\n  switch (type) {\n    case 'INITIALIZE_GAME':\n      // WARNING: Store enter point\n      if (payload) {\n        var list = [];\n\n        for (var ma = rules.minCard; ma <= rules.maxCard; ma++) {\n          list.push(ma);\n        }\n\n        var gen = function gen() {\n          var b = [];\n\n          for (var _ma = 0; _ma < rules.userDeskSize; _ma++) {\n            b.push(list[Math.floor(Math.random() * list.length)]);\n          }\n\n          return b;\n        };\n\n        a = {\n          deskSize: rules.deskSize,\n          botDesk: gen(),\n          // [*]\n          playerDesk: gen(),\n          // [*]\n          inGame: true,\n          gameDesk: [],\n          currentTurn: \"USER_TURN\"\n        };\n      }\n\n      break;\n\n    case 'PUSH_CARD_TO_DESK':\n      {\n        var b = a.gameDesk,\n            c = {\n          value: payload.value,\n          sender: payload.sender\n        },\n            d = {\n          \"BOT_TARGET\": \"USER_TURN\",\n          \"USER_TARGET\": \"BOT_TURN\"\n        };\n\n        if (!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) {\n          // create new\n          a.gameDesk.push([c]);\n        } else {\n          // beat\n          a.gameDesk[b.length - 1].push(c);\n        }\n\n        a.currentTurn = d[payload.sender];\n      }\n      break;\n\n    case 'START_BOT_RUNNER':\n      {\n        /* My first an - explained */\n        var _b = a.botDesk,\n            // bot desc\n        _c = -1,\n            // best card\n        _d = a.gameDesk,\n            e = _d.slice(-1)[0]; // last casted cart\n\n\n        if (!e || e.length !== 1) {\n          a.gameDesk.push([{\n            value: _b[0],\n            sender: \"BOT_TARGET\"\n          }]);\n        } else {\n          var f = -1; // best answer\n\n          for (var _ma2 = 0; _ma2 < a.botDesk.length; _ma2++) {\n            console.log(_ma2);\n          }\n        } // a.currentTurn = \"USER_TURN\";\n\n      }\n      break;\n\n    default:\n      break;\n  }\n\n  return a;\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/olesodynets/Documents/Coding/htdocs/card-play/src/reducers/global.js"],"names":["rules","reducer","state","type","payload","a","Object","assign","list","ma","minCard","maxCard","push","gen","b","userDeskSize","Math","floor","random","length","deskSize","botDesk","playerDesk","inGame","gameDesk","currentTurn","c","value","sender","d","slice","e","f","console","log"],"mappings":"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","sourcesContent":["import rules from '../rules';\n\nfunction reducer(state = {}, { type, payload }) {\n    let a = Object.assign({}, state);\n\n    switch(type) {\n        case 'INITIALIZE_GAME': // WARNING: Store enter point\n            if(payload) {\n                let list = [];\n                for(let ma = rules.minCard; ma <= rules.maxCard; ma++) {\n                    list.push(ma);\n                }\n                let gen = () => {\n                    let b = [];\n                    for(let ma = 0; ma < rules.userDeskSize; ma++) {\n                        b.push(list[Math.floor(Math.random() * list.length)]);\n                    }\n\n                    return b;\n                }\n                \n                a = {\n                    deskSize: rules.deskSize,\n                    botDesk: gen(), // [*]\n                    playerDesk: gen(), // [*]\n                    inGame: true,\n                    gameDesk: [],\n                    currentTurn: \"USER_TURN\"\n                }\n            }\n        break;\n        case 'PUSH_CARD_TO_DESK':\n            {\n                let b = a.gameDesk,\n                    c = {\n                        value: payload.value,\n                        sender: payload.sender\n                    },\n                    d = {\n                        \"BOT_TARGET\" : \"USER_TURN\",\n                        \"USER_TARGET\" : \"BOT_TURN\"\n                    }\n                if(!b.slice(-1)[0] || b.slice(-1)[0].length !== 1) { // create new\n                    a.gameDesk.push([c]);\n                } else { // beat\n                    a.gameDesk[b.length - 1].push(c);\n                }\n                a.currentTurn = d[payload.sender];\n            }\n        break;\n        case 'START_BOT_RUNNER':\n            {\n                /* My first an - explained */\n\n                let b = a.botDesk, // bot desc\n                    c = -1, // best card\n                    d = a.gameDesk,\n                    e = d.slice(-1)[0]; // last casted cart\n\n                if(!e || e.length !== 1) {\n                    a.gameDesk.push([{\n                        value: b[0],\n                        sender: \"BOT_TARGET\"\n                    }]);\n                } else {\n                    let f = -1; // best answer\n                    for(let ma = 0; ma < a.botDesk.length; ma++) {\n                        console.log(ma);\n                    }\n                }\n\n                // a.currentTurn = \"USER_TURN\";\n            }\n        break;\n        default:break;\n    }\n\n    return a;\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}